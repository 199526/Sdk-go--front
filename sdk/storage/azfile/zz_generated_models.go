//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package azfile

import (
	"io"
	"time"
)

// AccessPolicy - An Access policy.
type AccessPolicy struct {
	// The date-time the policy expires.
	Expiry *time.Time `xml:"Expiry"`

	// The permissions for the ACL policy.
	Permission *string `xml:"Permission"`

	// The date-time the policy is active.
	Start *time.Time `xml:"Start"`
}

type ClearRange struct {
	// REQUIRED
	End *int64 `xml:"End"`

	// REQUIRED
	Start *int64 `xml:"Start"`
}

// CopyFileSmbInfo contains a group of parameters for the fileClient.StartCopy method.
type CopyFileSmbInfo struct {
	// Specifies either the option to copy file attributes from a source file(source) to a target file or a list of attributes
	// to set on a target file.
	FileAttributes *string
	// Specifies either the option to copy file creation time from a source file(source) to a target file or a time value in ISO
	// 8601 format to set as creation time on a target file.
	FileCreationTime *string
	// Specifies either the option to copy file last write time from a source file(source) to a target file or a time value in
	// ISO 8601 format to set as last write time on a target file.
	FileLastWriteTime *string
	// Specifies the option to copy file security descriptor from source file or to set it using the value which is defined by
	// the header value of x-ms-file-permission or x-ms-file-permission-key.
	FilePermissionCopyMode *PermissionCopyModeType
	// Specifies the option to overwrite the target file if it already exists and has read-only attribute set.
	IgnoreReadOnly *bool
	// Specifies the option to set archive attribute on a target file. True means archive attribute will be set on a target file
	// despite attribute overrides or a source file state.
	SetArchiveAttribute *bool
}

// DirectoryItem - A listed directory item.
type DirectoryItem struct {
	// REQUIRED
	Name          *string `xml:"Name"`
	Attributes    *string `xml:"Attributes"`
	FileID        *string `xml:"FileId"`
	PermissionKey *string `xml:"PermissionKey"`

	// File properties.
	Properties *FileProperty `xml:"Properties"`
}

// FileItem - A listed file item.
type FileItem struct {
	// REQUIRED
	Name *string `xml:"Name"`

	// REQUIRED; File properties.
	Properties    *FileProperty `xml:"Properties"`
	Attributes    *string       `xml:"Attributes"`
	FileID        *string       `xml:"FileId"`
	PermissionKey *string       `xml:"PermissionKey"`
}

// FileProperty - File properties.
type FileProperty struct {
	// REQUIRED; Content length of the file. This value may not be up-to-date since an SMB client may have modified the file locally.
	// The value of Content-Length may not reflect that fact until the handle is closed or
	// the op-lock is broken. To retrieve current property values, call Get File Properties.
	ContentLength  *int64     `xml:"Content-Length"`
	ChangeTime     *time.Time `xml:"ChangeTime"`
	CreationTime   *time.Time `xml:"CreationTime"`
	Etag           *string    `xml:"Etag"`
	LastAccessTime *time.Time `xml:"LastAccessTime"`
	LastModified   *time.Time `xml:"Last-Modified"`
	LastWriteTime  *time.Time `xml:"LastWriteTime"`
}

// FileRange - An Azure Storage file range.
type FileRange struct {
	// REQUIRED; End of the range.
	End *int64 `xml:"End"`

	// REQUIRED; Start of the range.
	Start *int64 `xml:"Start"`
}

// FilesAndDirectoriesListSegment - Abstract for entries that can be listed from Directory.
type FilesAndDirectoriesListSegment struct {
	// REQUIRED
	DirectoryItems []*DirectoryItem `xml:"Directory"`

	// REQUIRED
	FileItems []*FileItem `xml:"File"`
}

// HandleItem - A listed Azure Storage handle item.
type HandleItem struct {
	// REQUIRED; Client IP that opened the handle
	ClientIP *string `xml:"ClientIp"`

	// REQUIRED; FileId uniquely identifies the file or directory.
	FileID *string `xml:"FileId"`

	// REQUIRED; XSMB service handle ID
	HandleID *string `xml:"HandleId"`

	// REQUIRED; Time when the session that previously opened the handle has last been reconnected. (UTC)
	OpenTime *time.Time `xml:"OpenTime"`

	// REQUIRED; File or directory name including full path starting from share root
	Path *string `xml:"Path"`

	// REQUIRED; SMB session ID in context of which the file handle was opened
	SessionID *string `xml:"SessionId"`

	// Time handle was last connected to (UTC)
	LastReconnectTime *time.Time `xml:"LastReconnectTime"`

	// ParentId uniquely identifies the parent directory of the object.
	ParentID *string `xml:"ParentId"`
}

// LeaseAccessConditions contains a group of parameters for the shareClient.GetProperties method.
type LeaseAccessConditions struct {
	// If specified, the operation only succeeds if the resource's lease is active and matches this ID.
	LeaseID *string
}

// ListFilesAndDirectoriesSegmentResponse - An enumeration of directories and files.
type ListFilesAndDirectoriesSegmentResponse struct {
	// REQUIRED
	DirectoryPath *string `xml:"DirectoryPath,attr"`

	// REQUIRED
	NextMarker *string `xml:"NextMarker"`

	// REQUIRED
	Prefix *string `xml:"Prefix"`

	// REQUIRED; Abstract for entries that can be listed from Directory.
	Segment *FilesAndDirectoriesListSegment `xml:"Entries"`

	// REQUIRED
	ServiceEndpoint *string `xml:"ServiceEndpoint,attr"`

	// REQUIRED
	ShareName     *string `xml:"ShareName,attr"`
	DirectoryID   *string `xml:"DirectoryId"`
	Marker        *string `xml:"Marker"`
	MaxResults    *int32  `xml:"MaxResults"`
	ShareSnapshot *string `xml:"ShareSnapshot,attr"`
}

// ListHandlesResponse - An enumeration of handles.
type ListHandlesResponse struct {
	// REQUIRED
	NextMarker *string       `xml:"NextMarker"`
	HandleList []*HandleItem `xml:"Entries>Handle"`
}

// ListSharesResponse - An enumeration of shares.
type ListSharesResponse struct {
	// REQUIRED
	NextMarker *string `xml:"NextMarker"`

	// REQUIRED
	ServiceEndpoint *string              `xml:"ServiceEndpoint,attr"`
	Marker          *string              `xml:"Marker"`
	MaxResults      *int32               `xml:"MaxResults"`
	Prefix          *string              `xml:"Prefix"`
	ShareItems      []*ShareItemInternal `xml:"Shares>Share"`
}

// ShareCorsRule - CORS is an HTTP feature that enables a web application running under one domain to access resources in
// another domain. Web browsers implement a security restriction known as same-origin policy that
// prevents a web page from calling APIs in a different domain; CORS provides a secure way to allow one domain (the origin
// domain) to call APIs in another domain.
type ShareCorsRule struct {
	// REQUIRED; The request headers that the origin domain may specify on the CORS request.
	AllowedHeaders *string `xml:"AllowedHeaders"`

	// REQUIRED; The methods (HTTP request verbs) that the origin domain may use for a CORS request. (comma separated)
	AllowedMethods *string `xml:"AllowedMethods"`

	// REQUIRED; The origin domains that are permitted to make a request against the storage service via CORS. The origin domain
	// is the domain from which the request originates. Note that the origin must be an exact
	// case-sensitive match with the origin that the user age sends to the service. You can also use the wildcard character '*'
	// to allow all origin domains to make requests via CORS.
	AllowedOrigins *string `xml:"AllowedOrigins"`

	// REQUIRED; The response headers that may be sent in the response to the CORS request and exposed by the browser to the request
	// issuer.
	ExposedHeaders *string `xml:"ExposedHeaders"`

	// REQUIRED; The maximum amount time that a browser should cache the preflight OPTIONS request.
	MaxAgeInSeconds *int32 `xml:"MaxAgeInSeconds"`
}

// ShareFileHTTPHeaders contains a group of parameters for the fileClient.Create method.
type ShareFileHTTPHeaders struct {
	// Sets the file's cache control. The File service stores this value but does not use or modify it.
	CacheControl *string
	// Sets the file's Content-Disposition header.
	ContentDisposition *string
	// Specifies which content encodings have been applied to the file.
	ContentEncoding *string
	// Specifies the natural languages used by this resource.
	ContentLanguage *string
	// Sets the file's MD5 hash.
	ContentMD5 []byte
	// Sets the MIME content type of the file. The default type is 'application/octet-stream'.
	ContentType *string
}

// ShareFileRangeList - The list of file ranges
type ShareFileRangeList struct {
	ClearRanges []*ClearRange `xml:"ClearRange"`
	Ranges      []*FileRange  `xml:"Range"`
}

// ShareItemInternal - A listed Azure Storage share item.
type ShareItemInternal struct {
	// REQUIRED
	Name *string `xml:"Name"`

	// REQUIRED; Properties of a share.
	Properties *SharePropertiesInternal `xml:"Properties"`
	Deleted    *bool                    `xml:"Deleted"`

	// Dictionary of
	Metadata map[string]*string `xml:"Metadata"`
	Snapshot *string            `xml:"Snapshot"`
	Version  *string            `xml:"Version"`
}

// ShareMetrics - Storage Analytics metrics for file service.
type ShareMetrics struct {
	// REQUIRED; Indicates whether metrics are enabled for the File service.
	Enabled *bool `xml:"Enabled"`

	// REQUIRED; The version of Storage Analytics to configure.
	Version *string `xml:"Version"`

	// Indicates whether metrics should generate summary statistics for called API operations.
	IncludeApis *bool `xml:"IncludeAPIs"`

	// The retention policy.
	RetentionPolicy *ShareRetentionPolicy `xml:"RetentionPolicy"`
}

// SharePermission - A permission (a security descriptor) at the share level.
type SharePermission struct {
	// REQUIRED; The permission in the Security Descriptor Definition Language (SDDL).
	Permission *string `json:"permission,omitempty"`
}

// SharePropertiesInternal - Properties of a share.
type SharePropertiesInternal struct {
	// REQUIRED
	Etag *string `xml:"Etag"`

	// REQUIRED
	LastModified *time.Time `xml:"Last-Modified"`

	// REQUIRED
	Quota                     *int32     `xml:"Quota"`
	AccessTier                *string    `xml:"AccessTier"`
	AccessTierChangeTime      *time.Time `xml:"AccessTierChangeTime"`
	AccessTierTransitionState *string    `xml:"AccessTierTransitionState"`
	DeletedTime               *time.Time `xml:"DeletedTime"`
	EnabledProtocols          *string    `xml:"EnabledProtocols"`

	// When a share is leased, specifies whether the lease is of infinite or fixed duration.
	LeaseDuration *LeaseDurationType `xml:"LeaseDuration"`

	// Lease state of the share.
	LeaseState *LeaseStateType `xml:"LeaseState"`

	// The current lease status of the share.
	LeaseStatus                   *LeaseStatusType `xml:"LeaseStatus"`
	NextAllowedQuotaDowngradeTime *time.Time       `xml:"NextAllowedQuotaDowngradeTime"`
	ProvisionedEgressMBps         *int32           `xml:"ProvisionedEgressMBps"`
	ProvisionedIngressMBps        *int32           `xml:"ProvisionedIngressMBps"`
	ProvisionedIops               *int32           `xml:"ProvisionedIops"`
	RemainingRetentionDays        *int32           `xml:"RemainingRetentionDays"`
	RootSquash                    *ShareRootSquash `xml:"RootSquash"`
}

// ShareProtocolSettings - Protocol settings
type ShareProtocolSettings struct {
	// Settings for SMB protocol.
	Smb *ShareSmbSettings `xml:"SMB"`
}

// ShareRetentionPolicy - The retention policy.
type ShareRetentionPolicy struct {
	// REQUIRED; Indicates whether a retention policy is enabled for the File service. If false, metrics data is retained, and
	// the user is responsible for deleting it.
	Enabled *bool `xml:"Enabled"`

	// Indicates the number of days that metrics data should be retained. All data older than this value will be deleted. Metrics
	// data is deleted on a best-effort basis after the retention period expires.
	Days *int32 `xml:"Days"`
}

// ShareServiceProperties - Storage service properties.
type ShareServiceProperties struct {
	// The set of CORS rules.
	Cors []*ShareCorsRule `xml:"Cors>CorsRule"`

	// A summary of request statistics grouped by API in hourly aggregates for files.
	HourMetrics *ShareMetrics `xml:"HourMetrics"`

	// A summary of request statistics grouped by API in minute aggregates for files.
	MinuteMetrics *ShareMetrics `xml:"MinuteMetrics"`

	// Protocol settings
	Protocol *ShareProtocolSettings `xml:"ProtocolSettings"`
}

// ShareSmbSettings - Settings for SMB protocol.
type ShareSmbSettings struct {
	// Settings for SMB Multichannel.
	Multichannel *SmbMultichannel `xml:"Multichannel"`
}

// ShareStats - Stats for the share.
type ShareStats struct {
	// REQUIRED; The approximate size of the data stored in bytes. Note that this value may not include all recently created or
	// recently resized files.
	ShareUsageBytes *int64 `xml:"ShareUsageBytes"`
}

// SignedIdentifier - Signed identifier.
type SignedIdentifier struct {
	// REQUIRED; A unique id.
	ID *string `xml:"Id"`

	// The access policy.
	AccessPolicy *AccessPolicy `xml:"AccessPolicy"`
}

// SmbMultichannel - Settings for SMB multichannel
type SmbMultichannel struct {
	// If SMB multichannel is enabled.
	Enabled *bool `xml:"Enabled"`
}

// SourceModifiedAccessConditions contains a group of parameters for the fileClient.UploadRangeFromURL method.
type SourceModifiedAccessConditions struct {
	// Specify the crc64 value to operate only on range with a matching crc64 checksum.
	SourceIfMatchCRC64 []byte
	// Specify the crc64 value to operate only on range without a matching crc64 checksum.
	SourceIfNoneMatchCRC64 []byte
}

//type ShareError struct {
//	Message *string `json:"Message,omitempty"`
//}

// directoryClientCreateOptions contains the optional parameters for the directoryClient.Create method.
type directoryClientCreateOptions struct {
	// If specified the permission (security descriptor) shall be set for the directory/file. This header can be used if Permission
	// size is <= 8KB, else x-ms-file-permission-key header shall be used. Default
	// value: Inherit. If SDDL is specified as input, it must have owner, group and dacl. Note: Only one of the x-ms-file-permission
	// or x-ms-file-permission-key should be specified.
	FilePermission *string
	// Key of the permission to be set for the directory/file. Note: Only one of the x-ms-file-permission or x-ms-file-permission-key
	// should be specified.
	FilePermissionKey *string
	// A name-value pair to associate with a file storage object.
	Metadata map[string]string
	// The timeout parameter is expressed in seconds. For more information, see Setting Timeouts for File Service Operations.
	// [https://docs.microsoft.com/en-us/rest/api/storageservices/Setting-Timeouts-for-File-Service-Operations?redirectedfrom=MSDN]
	Timeout *int32
}

// directoryClientDeleteOptions contains the optional parameters for the directoryClient.Delete method.
type directoryClientDeleteOptions struct {
	// The timeout parameter is expressed in seconds. For more information, see Setting Timeouts for File Service Operations.
	// [https://docs.microsoft.com/en-us/rest/api/storageservices/Setting-Timeouts-for-File-Service-Operations?redirectedfrom=MSDN]
	Timeout *int32
}

// directoryClientForceCloseHandlesOptions contains the optional parameters for the directoryClient.ForceCloseHandles method.
type directoryClientForceCloseHandlesOptions struct {
	// A string value that identifies the portion of the list to be returned with the next list operation. The operation returns
	// a marker value within the response body if the list returned was not complete.
	// The marker value may then be used in a subsequent call to request the next set of list items. The marker value is opaque
	// to the client.
	Marker *string
	// Specifies operation should apply to the directory specified in the URI, its files, its subdirectories and their files.
	Recursive *bool
	// The snapshot parameter is an opaque DateTime value that, when present, specifies the share snapshot to query.
	Sharesnapshot *string
	// The timeout parameter is expressed in seconds. For more information, see Setting Timeouts for File Service Operations.
	// [https://docs.microsoft.com/en-us/rest/api/storageservices/Setting-Timeouts-for-File-Service-Operations?redirectedfrom=MSDN]
	Timeout *int32
}

// directoryClientGetPropertiesOptions contains the optional parameters for the directoryClient.GetProperties method.
type directoryClientGetPropertiesOptions struct {
	// The snapshot parameter is an opaque DateTime value that, when present, specifies the share snapshot to query.
	Sharesnapshot *string
	// The timeout parameter is expressed in seconds. For more information, see Setting Timeouts for File Service Operations.
	// [https://docs.microsoft.com/en-us/rest/api/storageservices/Setting-Timeouts-for-File-Service-Operations?redirectedfrom=MSDN]
	Timeout *int32
}

// directoryClientListFilesAndDirectoriesSegmentOptions contains the optional parameters for the directoryClient.ListFilesAndDirectoriesSegment
// method.
type directoryClientListFilesAndDirectoriesSegmentOptions struct {
	// Include this parameter to specify one or more datasets to include in the response.
	Include []ListFilesIncludeType
	// Include extended information.
	IncludeExtendedInfo *bool
	// A string value that identifies the portion of the list to be returned with the next list operation. The operation returns
	// a marker value within the response body if the list returned was not complete.
	// The marker value may then be used in a subsequent call to request the next set of list items. The marker value is opaque
	// to the client.
	Marker *string
	// Specifies the maximum number of entries to return. If the request does not specify maxresults, or specifies a value greater
	// than 5,000, the server will return up to 5,000 items.
	Maxresults *int32
	// Filters the results to return only entries whose name begins with the specified prefix.
	Prefix *string
	// The snapshot parameter is an opaque DateTime value that, when present, specifies the share snapshot to query.
	Sharesnapshot *string
	// The timeout parameter is expressed in seconds. For more information, see Setting Timeouts for File Service Operations.
	// [https://docs.microsoft.com/en-us/rest/api/storageservices/Setting-Timeouts-for-File-Service-Operations?redirectedfrom=MSDN]
	Timeout *int32
}

// directoryClientListHandlesOptions contains the optional parameters for the directoryClient.ListHandles method.
type directoryClientListHandlesOptions struct {
	// A string value that identifies the portion of the list to be returned with the next list operation. The operation returns
	// a marker value within the response body if the list returned was not complete.
	// The marker value may then be used in a subsequent call to request the next set of list items. The marker value is opaque
	// to the client.
	Marker *string
	// Specifies the maximum number of entries to return. If the request does not specify maxresults, or specifies a value greater
	// than 5,000, the server will return up to 5,000 items.
	Maxresults *int32
	// Specifies operation should apply to the directory specified in the URI, its files, its subdirectories and their files.
	Recursive *bool
	// The snapshot parameter is an opaque DateTime value that, when present, specifies the share snapshot to query.
	Sharesnapshot *string
	// The timeout parameter is expressed in seconds. For more information, see Setting Timeouts for File Service Operations.
	// [https://docs.microsoft.com/en-us/rest/api/storageservices/Setting-Timeouts-for-File-Service-Operations?redirectedfrom=MSDN]
	Timeout *int32
}

// directoryClientSetMetadataOptions contains the optional parameters for the directoryClient.SetMetadata method.
type directoryClientSetMetadataOptions struct {
	// A name-value pair to associate with a file storage object.
	Metadata map[string]string
	// The timeout parameter is expressed in seconds. For more information, see Setting Timeouts for File Service Operations.
	// [https://docs.microsoft.com/en-us/rest/api/storageservices/Setting-Timeouts-for-File-Service-Operations?redirectedfrom=MSDN]
	Timeout *int32
}

// directoryClientSetPropertiesOptions contains the optional parameters for the directoryClient.SetProperties method.
type directoryClientSetPropertiesOptions struct {
	// If specified the permission (security descriptor) shall be set for the directory/file. This header can be used if Permission
	// size is <= 8KB, else x-ms-file-permission-key header shall be used. Default
	// value: Inherit. If SDDL is specified as input, it must have owner, group and dacl. Note: Only one of the x-ms-file-permission
	// or x-ms-file-permission-key should be specified.
	FilePermission *string
	// Key of the permission to be set for the directory/file. Note: Only one of the x-ms-file-permission or x-ms-file-permission-key
	// should be specified.
	FilePermissionKey *string
	// The timeout parameter is expressed in seconds. For more information, see Setting Timeouts for File Service Operations.
	// [https://docs.microsoft.com/en-us/rest/api/storageservices/Setting-Timeouts-for-File-Service-Operations?redirectedfrom=MSDN]
	Timeout *int32
}

// fileClientAbortCopyOptions contains the optional parameters for the fileClient.AbortCopy method.
type fileClientAbortCopyOptions struct {
	// The timeout parameter is expressed in seconds. For more information, see Setting Timeouts for File Service Operations.
	// [https://docs.microsoft.com/en-us/rest/api/storageservices/Setting-Timeouts-for-File-Service-Operations?redirectedfrom=MSDN]
	Timeout *int32
}

// fileClientAcquireLeaseOptions contains the optional parameters for the fileClient.AcquireLease method.
type fileClientAcquireLeaseOptions struct {
	// Specifies the duration of the lease, in seconds, or negative one (-1) for a lease that never expires. A non-infinite lease
	// can be between 15 and 60 seconds. A lease duration cannot be changed using
	// renew or change.
	Duration *int32
	// Proposed lease ID, in a GUID string format. The File service returns 400 (Invalid request) if the proposed lease ID is
	// not in the correct format. See Guid Constructor (String) for a list of valid GUID
	// string formats.
	ProposedLeaseID *string
	// Provides a client-generated, opaque value with a 1 KB character limit that is recorded in the analytics logs when storage
	// analytics logging is enabled.
	RequestID *string
	// The timeout parameter is expressed in seconds. For more information, see Setting Timeouts for File Service Operations.
	// [https://docs.microsoft.com/en-us/rest/api/storageservices/Setting-Timeouts-for-File-Service-Operations?redirectedfrom=MSDN]
	Timeout *int32
}

// fileClientBreakLeaseOptions contains the optional parameters for the fileClient.BreakLease method.
type fileClientBreakLeaseOptions struct {
	// Provides a client-generated, opaque value with a 1 KB character limit that is recorded in the analytics logs when storage
	// analytics logging is enabled.
	RequestID *string
	// The timeout parameter is expressed in seconds. For more information, see Setting Timeouts for File Service Operations.
	// [https://docs.microsoft.com/en-us/rest/api/storageservices/Setting-Timeouts-for-File-Service-Operations?redirectedfrom=MSDN]
	Timeout *int32
}

// fileClientChangeLeaseOptions contains the optional parameters for the fileClient.ChangeLease method.
type fileClientChangeLeaseOptions struct {
	// Proposed lease ID, in a GUID string format. The File service returns 400 (Invalid request) if the proposed lease ID is
	// not in the correct format. See Guid Constructor (String) for a list of valid GUID
	// string formats.
	ProposedLeaseID *string
	// Provides a client-generated, opaque value with a 1 KB character limit that is recorded in the analytics logs when storage
	// analytics logging is enabled.
	RequestID *string
	// The timeout parameter is expressed in seconds. For more information, see Setting Timeouts for File Service Operations.
	// [https://docs.microsoft.com/en-us/rest/api/storageservices/Setting-Timeouts-for-File-Service-Operations?redirectedfrom=MSDN]
	Timeout *int32
}

// fileClientCreateOptions contains the optional parameters for the fileClient.Create method.
type fileClientCreateOptions struct {
	// If specified the permission (security descriptor) shall be set for the directory/file. This header can be used if Permission
	// size is <= 8KB, else x-ms-file-permission-key header shall be used. Default
	// value: Inherit. If SDDL is specified as input, it must have owner, group and dacl. Note: Only one of the x-ms-file-permission
	// or x-ms-file-permission-key should be specified.
	FilePermission *string
	// Key of the permission to be set for the directory/file. Note: Only one of the x-ms-file-permission or x-ms-file-permission-key
	// should be specified.
	FilePermissionKey *string
	// A name-value pair to associate with a file storage object.
	Metadata map[string]string
	// The timeout parameter is expressed in seconds. For more information, see Setting Timeouts for File Service Operations.
	// [https://docs.microsoft.com/en-us/rest/api/storageservices/Setting-Timeouts-for-File-Service-Operations?redirectedfrom=MSDN]
	Timeout *int32
}

// fileClientDeleteOptions contains the optional parameters for the fileClient.Delete method.
type fileClientDeleteOptions struct {
	// The timeout parameter is expressed in seconds. For more information, see Setting Timeouts for File Service Operations.
	// [https://docs.microsoft.com/en-us/rest/api/storageservices/Setting-Timeouts-for-File-Service-Operations?redirectedfrom=MSDN]
	Timeout *int32
}

// fileClientDownloadOptions contains the optional parameters for the fileClient.Download method.
type fileClientDownloadOptions struct {
	// Return file data only from the specified byte range.
	Range *string
	// When this header is set to true and specified together with the Range header, the service returns the MD5 hash for the
	// range, as long as the range is less than or equal to 4 MB in size.
	RangeGetContentMD5 *bool
	// The timeout parameter is expressed in seconds. For more information, see Setting Timeouts for File Service Operations.
	// [https://docs.microsoft.com/en-us/rest/api/storageservices/Setting-Timeouts-for-File-Service-Operations?redirectedfrom=MSDN]
	Timeout *int32
}

// fileClientForceCloseHandlesOptions contains the optional parameters for the fileClient.ForceCloseHandles method.
type fileClientForceCloseHandlesOptions struct {
	// A string value that identifies the portion of the list to be returned with the next list operation. The operation returns
	// a marker value within the response body if the list returned was not complete.
	// The marker value may then be used in a subsequent call to request the next set of list items. The marker value is opaque
	// to the client.
	Marker *string
	// The snapshot parameter is an opaque DateTime value that, when present, specifies the share snapshot to query.
	Sharesnapshot *string
	// The timeout parameter is expressed in seconds. For more information, see Setting Timeouts for File Service Operations.
	// [https://docs.microsoft.com/en-us/rest/api/storageservices/Setting-Timeouts-for-File-Service-Operations?redirectedfrom=MSDN]
	Timeout *int32
}

// fileClientGetPropertiesOptions contains the optional parameters for the fileClient.GetProperties method.
type fileClientGetPropertiesOptions struct {
	// The snapshot parameter is an opaque DateTime value that, when present, specifies the share snapshot to query.
	Sharesnapshot *string
	// The timeout parameter is expressed in seconds. For more information, see Setting Timeouts for File Service Operations.
	// [https://docs.microsoft.com/en-us/rest/api/storageservices/Setting-Timeouts-for-File-Service-Operations?redirectedfrom=MSDN]
	Timeout *int32
}

// fileClientGetRangeListOptions contains the optional parameters for the fileClient.GetRangeList method.
type fileClientGetRangeListOptions struct {
	// The previous snapshot parameter is an opaque DateTime value that, when present, specifies the previous snapshot.
	Prevsharesnapshot *string
	// Specifies the range of bytes over which to list ranges, inclusively.
	Range *string
	// The snapshot parameter is an opaque DateTime value that, when present, specifies the share snapshot to query.
	Sharesnapshot *string
	// The timeout parameter is expressed in seconds. For more information, see Setting Timeouts for File Service Operations.
	// [https://docs.microsoft.com/en-us/rest/api/storageservices/Setting-Timeouts-for-File-Service-Operations?redirectedfrom=MSDN]
	Timeout *int32
}

// fileClientListHandlesOptions contains the optional parameters for the fileClient.ListHandles method.
type fileClientListHandlesOptions struct {
	// A string value that identifies the portion of the list to be returned with the next list operation. The operation returns
	// a marker value within the response body if the list returned was not complete.
	// The marker value may then be used in a subsequent call to request the next set of list items. The marker value is opaque
	// to the client.
	Marker *string
	// Specifies the maximum number of entries to return. If the request does not specify maxresults, or specifies a value greater
	// than 5,000, the server will return up to 5,000 items.
	Maxresults *int32
	// The snapshot parameter is an opaque DateTime value that, when present, specifies the share snapshot to query.
	Sharesnapshot *string
	// The timeout parameter is expressed in seconds. For more information, see Setting Timeouts for File Service Operations.
	// [https://docs.microsoft.com/en-us/rest/api/storageservices/Setting-Timeouts-for-File-Service-Operations?redirectedfrom=MSDN]
	Timeout *int32
}

// fileClientReleaseLeaseOptions contains the optional parameters for the fileClient.ReleaseLease method.
type fileClientReleaseLeaseOptions struct {
	// Provides a client-generated, opaque value with a 1 KB character limit that is recorded in the analytics logs when storage
	// analytics logging is enabled.
	RequestID *string
	// The timeout parameter is expressed in seconds. For more information, see Setting Timeouts for File Service Operations.
	// [https://docs.microsoft.com/en-us/rest/api/storageservices/Setting-Timeouts-for-File-Service-Operations?redirectedfrom=MSDN]
	Timeout *int32
}

// fileClientSetHTTPHeadersOptions contains the optional parameters for the fileClient.SetHTTPHeaders method.
type fileClientSetHTTPHeadersOptions struct {
	// Resizes a file to the specified size. If the specified byte value is less than the current size of the file, then all ranges
	// above the specified byte value are cleared.
	FileContentLength *int64
	// If specified the permission (security descriptor) shall be set for the directory/file. This header can be used if Permission
	// size is <= 8KB, else x-ms-file-permission-key header shall be used. Default
	// value: Inherit. If SDDL is specified as input, it must have owner, group and dacl. Note: Only one of the x-ms-file-permission
	// or x-ms-file-permission-key should be specified.
	FilePermission *string
	// Key of the permission to be set for the directory/file. Note: Only one of the x-ms-file-permission or x-ms-file-permission-key
	// should be specified.
	FilePermissionKey *string
	// The timeout parameter is expressed in seconds. For more information, see Setting Timeouts for File Service Operations.
	// [https://docs.microsoft.com/en-us/rest/api/storageservices/Setting-Timeouts-for-File-Service-Operations?redirectedfrom=MSDN]
	Timeout *int32
}

// fileClientSetMetadataOptions contains the optional parameters for the fileClient.SetMetadata method.
type fileClientSetMetadataOptions struct {
	// A name-value pair to associate with a file storage object.
	Metadata map[string]string
	// The timeout parameter is expressed in seconds. For more information, see Setting Timeouts for File Service Operations.
	// [https://docs.microsoft.com/en-us/rest/api/storageservices/Setting-Timeouts-for-File-Service-Operations?redirectedfrom=MSDN]
	Timeout *int32
}

// fileClientStartCopyOptions contains the optional parameters for the fileClient.StartCopy method.
type fileClientStartCopyOptions struct {
	// If specified the permission (security descriptor) shall be set for the directory/file. This header can be used if Permission
	// size is <= 8KB, else x-ms-file-permission-key header shall be used. Default
	// value: Inherit. If SDDL is specified as input, it must have owner, group and dacl. Note: Only one of the x-ms-file-permission
	// or x-ms-file-permission-key should be specified.
	FilePermission *string
	// Key of the permission to be set for the directory/file. Note: Only one of the x-ms-file-permission or x-ms-file-permission-key
	// should be specified.
	FilePermissionKey *string
	// A name-value pair to associate with a file storage object.
	Metadata map[string]string
	// The timeout parameter is expressed in seconds. For more information, see Setting Timeouts for File Service Operations.
	// [https://docs.microsoft.com/en-us/rest/api/storageservices/Setting-Timeouts-for-File-Service-Operations?redirectedfrom=MSDN]
	Timeout *int32
}

// fileClientUploadRangeFromURLOptions contains the optional parameters for the fileClient.UploadRangeFromURL method.
type fileClientUploadRangeFromURLOptions struct {
	// Only Bearer type is supported. Credentials should be a valid OAuth access token to copy source.
	CopySourceAuthorization *string
	// Specify the crc64 calculated for the range of bytes that must be read from the copy source.
	SourceContentCRC64 []byte
	// Bytes of source data in the specified range.
	SourceRange *string
	// The timeout parameter is expressed in seconds. For more information, see Setting Timeouts for File Service Operations.
	// [https://docs.microsoft.com/en-us/rest/api/storageservices/Setting-Timeouts-for-File-Service-Operations?redirectedfrom=MSDN]
	Timeout *int32
}

// fileClientUploadRangeOptions contains the optional parameters for the fileClient.UploadRange method.
type fileClientUploadRangeOptions struct {
	// An MD5 hash of the content. This hash is used to verify the integrity of the data during transport. When the Content-MD5
	// header is specified, the File service compares the hash of the content that has
	// arrived with the header value that was sent. If the two hashes do not match, the operation will fail with error code 400
	// (Bad Request).
	ContentMD5 []byte
	// Initial data.
	Optionalbody io.ReadSeekCloser
	// The timeout parameter is expressed in seconds. For more information, see Setting Timeouts for File Service Operations.
	// [https://docs.microsoft.com/en-us/rest/api/storageservices/Setting-Timeouts-for-File-Service-Operations?redirectedfrom=MSDN]
	Timeout *int32
}

// serviceClientGetPropertiesOptions contains the optional parameters for the serviceClient.GetProperties method.
type serviceClientGetPropertiesOptions struct {
	// The timeout parameter is expressed in seconds. For more information, see Setting Timeouts for File Service Operations.
	// [https://docs.microsoft.com/en-us/rest/api/storageservices/Setting-Timeouts-for-File-Service-Operations?redirectedfrom=MSDN]
	Timeout *int32
}

// serviceClientListSharesSegmentOptions contains the optional parameters for the serviceClient.ListSharesSegment method.
type serviceClientListSharesSegmentOptions struct {
	// Include this parameter to specify one or more datasets to include in the response.
	Include []ListSharesIncludeType
	// A string value that identifies the portion of the list to be returned with the next list operation. The operation returns
	// a marker value within the response body if the list returned was not complete.
	// The marker value may then be used in a subsequent call to request the next set of list items. The marker value is opaque
	// to the client.
	Marker *string
	// Specifies the maximum number of entries to return. If the request does not specify maxresults, or specifies a value greater
	// than 5,000, the server will return up to 5,000 items.
	Maxresults *int32
	// Filters the results to return only entries whose name begins with the specified prefix.
	Prefix *string
	// The timeout parameter is expressed in seconds. For more information, see Setting Timeouts for File Service Operations.
	// [https://docs.microsoft.com/en-us/rest/api/storageservices/Setting-Timeouts-for-File-Service-Operations?redirectedfrom=MSDN]
	Timeout *int32
}

// serviceClientSetPropertiesOptions contains the optional parameters for the serviceClient.SetProperties method.
type serviceClientSetPropertiesOptions struct {
	// The timeout parameter is expressed in seconds. For more information, see Setting Timeouts for File Service Operations.
	// [https://docs.microsoft.com/en-us/rest/api/storageservices/Setting-Timeouts-for-File-Service-Operations?redirectedfrom=MSDN]
	Timeout *int32
}

// shareClientAcquireLeaseOptions contains the optional parameters for the shareClient.AcquireLease method.
type shareClientAcquireLeaseOptions struct {
	// Specifies the duration of the lease, in seconds, or negative one (-1) for a lease that never expires. A non-infinite lease
	// can be between 15 and 60 seconds. A lease duration cannot be changed using
	// renew or change.
	Duration *int32
	// Proposed lease ID, in a GUID string format. The File service returns 400 (Invalid request) if the proposed lease ID is
	// not in the correct format. See Guid Constructor (String) for a list of valid GUID
	// string formats.
	ProposedLeaseID *string
	// Provides a client-generated, opaque value with a 1 KB character limit that is recorded in the analytics logs when storage
	// analytics logging is enabled.
	RequestID *string
	// The snapshot parameter is an opaque DateTime value that, when present, specifies the share snapshot to query.
	Sharesnapshot *string
	// The timeout parameter is expressed in seconds. For more information, see Setting Timeouts for File Service Operations.
	// [https://docs.microsoft.com/en-us/rest/api/storageservices/Setting-Timeouts-for-File-Service-Operations?redirectedfrom=MSDN]
	Timeout *int32
}

// shareClientBreakLeaseOptions contains the optional parameters for the shareClient.BreakLease method.
type shareClientBreakLeaseOptions struct {
	// For a break operation, proposed duration the lease should continue before it is broken, in seconds, between 0 and 60. This
	// break period is only used if it is shorter than the time remaining on the
	// lease. If longer, the time remaining on the lease is used. A new lease will not be available before the break period has
	// expired, but the lease may be held for longer than the break period. If this
	// header does not appear with a break operation, a fixed-duration lease breaks after the remaining lease period elapses,
	// and an infinite lease breaks immediately.
	BreakPeriod *int32
	// Provides a client-generated, opaque value with a 1 KB character limit that is recorded in the analytics logs when storage
	// analytics logging is enabled.
	RequestID *string
	// The snapshot parameter is an opaque DateTime value that, when present, specifies the share snapshot to query.
	Sharesnapshot *string
	// The timeout parameter is expressed in seconds. For more information, see Setting Timeouts for File Service Operations.
	// [https://docs.microsoft.com/en-us/rest/api/storageservices/Setting-Timeouts-for-File-Service-Operations?redirectedfrom=MSDN]
	Timeout *int32
}

// shareClientChangeLeaseOptions contains the optional parameters for the shareClient.ChangeLease method.
type shareClientChangeLeaseOptions struct {
	// Proposed lease ID, in a GUID string format. The File service returns 400 (Invalid request) if the proposed lease ID is
	// not in the correct format. See Guid Constructor (String) for a list of valid GUID
	// string formats.
	ProposedLeaseID *string
	// Provides a client-generated, opaque value with a 1 KB character limit that is recorded in the analytics logs when storage
	// analytics logging is enabled.
	RequestID *string
	// The snapshot parameter is an opaque DateTime value that, when present, specifies the share snapshot to query.
	Sharesnapshot *string
	// The timeout parameter is expressed in seconds. For more information, see Setting Timeouts for File Service Operations.
	// [https://docs.microsoft.com/en-us/rest/api/storageservices/Setting-Timeouts-for-File-Service-Operations?redirectedfrom=MSDN]
	Timeout *int32
}

// shareClientCreateOptions contains the optional parameters for the shareClient.Create method.
type shareClientCreateOptions struct {
	// Specifies the access tier of the share.
	AccessTier *ShareAccessTier
	// Protocols to enable on the share.
	EnabledProtocols *string
	// A name-value pair to associate with a file storage object.
	Metadata map[string]string
	// Specifies the maximum size of the share, in gigabytes.
	Quota *int32
	// Root squash to set on the share. Only valid for NFS shares.
	RootSquash *ShareRootSquash
	// The timeout parameter is expressed in seconds. For more information, see Setting Timeouts for File Service Operations.
	// [https://docs.microsoft.com/en-us/rest/api/storageservices/Setting-Timeouts-for-File-Service-Operations?redirectedfrom=MSDN]
	Timeout *int32
}

// shareClientCreatePermissionOptions contains the optional parameters for the shareClient.CreatePermission method.
type shareClientCreatePermissionOptions struct {
	// The timeout parameter is expressed in seconds. For more information, see Setting Timeouts for File Service Operations.
	// [https://docs.microsoft.com/en-us/rest/api/storageservices/Setting-Timeouts-for-File-Service-Operations?redirectedfrom=MSDN]
	Timeout *int32
}

// shareClientCreateSnapshotOptions contains the optional parameters for the shareClient.CreateSnapshot method.
type shareClientCreateSnapshotOptions struct {
	// A name-value pair to associate with a file storage object.
	Metadata map[string]string
	// The timeout parameter is expressed in seconds. For more information, see Setting Timeouts for File Service Operations.
	// [https://docs.microsoft.com/en-us/rest/api/storageservices/Setting-Timeouts-for-File-Service-Operations?redirectedfrom=MSDN]
	Timeout *int32
}

// shareClientDeleteOptions contains the optional parameters for the shareClient.Delete method.
type shareClientDeleteOptions struct {
	// Specifies the option include to delete the base share and all of its snapshots.
	DeleteSnapshots *DeleteSnapshotsOptionType
	// The snapshot parameter is an opaque DateTime value that, when present, specifies the share snapshot to query.
	Sharesnapshot *string
	// The timeout parameter is expressed in seconds. For more information, see Setting Timeouts for File Service Operations.
	// [https://docs.microsoft.com/en-us/rest/api/storageservices/Setting-Timeouts-for-File-Service-Operations?redirectedfrom=MSDN]
	Timeout *int32
}

// shareClientGetAccessPolicyOptions contains the optional parameters for the shareClient.GetAccessPolicy method.
type shareClientGetAccessPolicyOptions struct {
	// The timeout parameter is expressed in seconds. For more information, see Setting Timeouts for File Service Operations.
	// [https://docs.microsoft.com/en-us/rest/api/storageservices/Setting-Timeouts-for-File-Service-Operations?redirectedfrom=MSDN]
	Timeout *int32
}

// shareClientGetPermissionOptions contains the optional parameters for the shareClient.GetPermission method.
type shareClientGetPermissionOptions struct {
	// The timeout parameter is expressed in seconds. For more information, see Setting Timeouts for File Service Operations.
	// [https://docs.microsoft.com/en-us/rest/api/storageservices/Setting-Timeouts-for-File-Service-Operations?redirectedfrom=MSDN]
	Timeout *int32
}

// shareClientGetPropertiesOptions contains the optional parameters for the shareClient.GetProperties method.
type shareClientGetPropertiesOptions struct {
	// The snapshot parameter is an opaque DateTime value that, when present, specifies the share snapshot to query.
	Sharesnapshot *string
	// The timeout parameter is expressed in seconds. For more information, see Setting Timeouts for File Service Operations.
	// [https://docs.microsoft.com/en-us/rest/api/storageservices/Setting-Timeouts-for-File-Service-Operations?redirectedfrom=MSDN]
	Timeout *int32
}

// shareClientGetStatisticsOptions contains the optional parameters for the shareClient.GetStatistics method.
type shareClientGetStatisticsOptions struct {
	// The timeout parameter is expressed in seconds. For more information, see Setting Timeouts for File Service Operations.
	// [https://docs.microsoft.com/en-us/rest/api/storageservices/Setting-Timeouts-for-File-Service-Operations?redirectedfrom=MSDN]
	Timeout *int32
}

// shareClientReleaseLeaseOptions contains the optional parameters for the shareClient.ReleaseLease method.
type shareClientReleaseLeaseOptions struct {
	// Provides a client-generated, opaque value with a 1 KB character limit that is recorded in the analytics logs when storage
	// analytics logging is enabled.
	RequestID *string
	// The snapshot parameter is an opaque DateTime value that, when present, specifies the share snapshot to query.
	Sharesnapshot *string
	// The timeout parameter is expressed in seconds. For more information, see Setting Timeouts for File Service Operations.
	// [https://docs.microsoft.com/en-us/rest/api/storageservices/Setting-Timeouts-for-File-Service-Operations?redirectedfrom=MSDN]
	Timeout *int32
}

// shareClientRenewLeaseOptions contains the optional parameters for the shareClient.RenewLease method.
type shareClientRenewLeaseOptions struct {
	// Provides a client-generated, opaque value with a 1 KB character limit that is recorded in the analytics logs when storage
	// analytics logging is enabled.
	RequestID *string
	// The snapshot parameter is an opaque DateTime value that, when present, specifies the share snapshot to query.
	Sharesnapshot *string
	// The timeout parameter is expressed in seconds. For more information, see Setting Timeouts for File Service Operations.
	// [https://docs.microsoft.com/en-us/rest/api/storageservices/Setting-Timeouts-for-File-Service-Operations?redirectedfrom=MSDN]
	Timeout *int32
}

// shareClientRestoreOptions contains the optional parameters for the shareClient.Restore method.
type shareClientRestoreOptions struct {
	// Specifies the name of the previously-deleted share.
	DeletedShareName *string
	// Specifies the version of the previously-deleted share.
	DeletedShareVersion *string
	// Provides a client-generated, opaque value with a 1 KB character limit that is recorded in the analytics logs when storage
	// analytics logging is enabled.
	RequestID *string
	// The timeout parameter is expressed in seconds. For more information, see Setting Timeouts for File Service Operations.
	// [https://docs.microsoft.com/en-us/rest/api/storageservices/Setting-Timeouts-for-File-Service-Operations?redirectedfrom=MSDN]
	Timeout *int32
}

// shareClientSetAccessPolicyOptions contains the optional parameters for the shareClient.SetAccessPolicy method.
type shareClientSetAccessPolicyOptions struct {
	// The ACL for the share.
	ShareACL []*SignedIdentifier
	// The timeout parameter is expressed in seconds. For more information, see Setting Timeouts for File Service Operations.
	// [https://docs.microsoft.com/en-us/rest/api/storageservices/Setting-Timeouts-for-File-Service-Operations?redirectedfrom=MSDN]
	Timeout *int32
}

// shareClientSetMetadataOptions contains the optional parameters for the shareClient.SetMetadata method.
type shareClientSetMetadataOptions struct {
	// A name-value pair to associate with a file storage object.
	Metadata map[string]string
	// The timeout parameter is expressed in seconds. For more information, see Setting Timeouts for File Service Operations.
	// [https://docs.microsoft.com/en-us/rest/api/storageservices/Setting-Timeouts-for-File-Service-Operations?redirectedfrom=MSDN]
	Timeout *int32
}

// shareClientSetPropertiesOptions contains the optional parameters for the shareClient.SetProperties method.
type shareClientSetPropertiesOptions struct {
	// Specifies the access tier of the share.
	AccessTier *ShareAccessTier
	// Specifies the maximum size of the share, in gigabytes.
	Quota *int32
	// Root squash to set on the share. Only valid for NFS shares.
	RootSquash *ShareRootSquash
	// The timeout parameter is expressed in seconds. For more information, see Setting Timeouts for File Service Operations.
	// [https://docs.microsoft.com/en-us/rest/api/storageservices/Setting-Timeouts-for-File-Service-Operations?redirectedfrom=MSDN]
	Timeout *int32
}
