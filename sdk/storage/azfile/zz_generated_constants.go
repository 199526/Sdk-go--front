//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package azfile

const (
	moduleName    = "azfile"
	moduleVersion = "v0.1.0"
)

type CopyStatusType string

const (
	CopyStatusTypePending CopyStatusType = "pending"
	CopyStatusTypeSuccess CopyStatusType = "success"
	CopyStatusTypeAborted CopyStatusType = "aborted"
	CopyStatusTypeFailed  CopyStatusType = "failed"
)

// PossibleCopyStatusTypeValues returns the possible values for the CopyStatusType const type.
func PossibleCopyStatusTypeValues() []CopyStatusType {
	return []CopyStatusType{
		CopyStatusTypePending,
		CopyStatusTypeSuccess,
		CopyStatusTypeAborted,
		CopyStatusTypeFailed,
	}
}

type DeleteSnapshotsOptionType string

const (
	DeleteSnapshotsOptionTypeInclude       DeleteSnapshotsOptionType = "include"
	DeleteSnapshotsOptionTypeIncludeLeased DeleteSnapshotsOptionType = "include-leased"
)

// PossibleDeleteSnapshotsOptionTypeValues returns the possible values for the DeleteSnapshotsOptionType const type.
func PossibleDeleteSnapshotsOptionTypeValues() []DeleteSnapshotsOptionType {
	return []DeleteSnapshotsOptionType{
		DeleteSnapshotsOptionTypeInclude,
		DeleteSnapshotsOptionTypeIncludeLeased,
	}
}

type FileRangeWriteType string

const (
	FileRangeWriteTypeUpdate FileRangeWriteType = "update"
	FileRangeWriteTypeClear  FileRangeWriteType = "clear"
)

// PossibleFileRangeWriteTypeValues returns the possible values for the FileRangeWriteType const type.
func PossibleFileRangeWriteTypeValues() []FileRangeWriteType {
	return []FileRangeWriteType{
		FileRangeWriteTypeUpdate,
		FileRangeWriteTypeClear,
	}
}

// LeaseDurationType - When a share is leased, specifies whether the lease is of infinite or fixed duration.
type LeaseDurationType string

const (
	LeaseDurationTypeInfinite LeaseDurationType = "infinite"
	LeaseDurationTypeFixed    LeaseDurationType = "fixed"
)

// PossibleLeaseDurationTypeValues returns the possible values for the LeaseDurationType const type.
func PossibleLeaseDurationTypeValues() []LeaseDurationType {
	return []LeaseDurationType{
		LeaseDurationTypeInfinite,
		LeaseDurationTypeFixed,
	}
}

// LeaseStateType - Lease state of the share.
type LeaseStateType string

const (
	LeaseStateTypeAvailable LeaseStateType = "available"
	LeaseStateTypeLeased    LeaseStateType = "leased"
	LeaseStateTypeExpired   LeaseStateType = "expired"
	LeaseStateTypeBreaking  LeaseStateType = "breaking"
	LeaseStateTypeBroken    LeaseStateType = "broken"
)

// PossibleLeaseStateTypeValues returns the possible values for the LeaseStateType const type.
func PossibleLeaseStateTypeValues() []LeaseStateType {
	return []LeaseStateType{
		LeaseStateTypeAvailable,
		LeaseStateTypeLeased,
		LeaseStateTypeExpired,
		LeaseStateTypeBreaking,
		LeaseStateTypeBroken,
	}
}

// LeaseStatusType - The current lease status of the share.
type LeaseStatusType string

const (
	LeaseStatusTypeLocked   LeaseStatusType = "locked"
	LeaseStatusTypeUnlocked LeaseStatusType = "unlocked"
)

// PossibleLeaseStatusTypeValues returns the possible values for the LeaseStatusType const type.
func PossibleLeaseStatusTypeValues() []LeaseStatusType {
	return []LeaseStatusType{
		LeaseStatusTypeLocked,
		LeaseStatusTypeUnlocked,
	}
}

type ListFilesIncludeType string

const (
	ListFilesIncludeTypeTimestamps    ListFilesIncludeType = "Timestamps"
	ListFilesIncludeTypeEtag          ListFilesIncludeType = "Etag"
	ListFilesIncludeTypeAttributes    ListFilesIncludeType = "Attributes"
	ListFilesIncludeTypePermissionKey ListFilesIncludeType = "PermissionKey"
)

// PossibleListFilesIncludeTypeValues returns the possible values for the ListFilesIncludeType const type.
func PossibleListFilesIncludeTypeValues() []ListFilesIncludeType {
	return []ListFilesIncludeType{
		ListFilesIncludeTypeTimestamps,
		ListFilesIncludeTypeEtag,
		ListFilesIncludeTypeAttributes,
		ListFilesIncludeTypePermissionKey,
	}
}

type ListSharesIncludeType string

const (
	ListSharesIncludeTypeSnapshots ListSharesIncludeType = "snapshots"
	ListSharesIncludeTypeMetadata  ListSharesIncludeType = "metadata"
	ListSharesIncludeTypeDeleted   ListSharesIncludeType = "deleted"
)

// PossibleListSharesIncludeTypeValues returns the possible values for the ListSharesIncludeType const type.
func PossibleListSharesIncludeTypeValues() []ListSharesIncludeType {
	return []ListSharesIncludeType{
		ListSharesIncludeTypeSnapshots,
		ListSharesIncludeTypeMetadata,
		ListSharesIncludeTypeDeleted,
	}
}

type PermissionCopyModeType string

const (
	PermissionCopyModeTypeNone     PermissionCopyModeType = ""
	PermissionCopyModeTypeSource   PermissionCopyModeType = "source"
	PermissionCopyModeTypeOverride PermissionCopyModeType = "override"
)

// PossiblePermissionCopyModeTypeValues returns the possible values for the PermissionCopyModeType const type.
func PossiblePermissionCopyModeTypeValues() []PermissionCopyModeType {
	return []PermissionCopyModeType{
		PermissionCopyModeTypeSource,
		PermissionCopyModeTypeOverride,
	}
}

type ShareAccessTier string

const (
	ShareAccessTierCool                 ShareAccessTier = "Cool"
	ShareAccessTierHot                  ShareAccessTier = "Hot"
	ShareAccessTierTransactionOptimized ShareAccessTier = "TransactionOptimized"
)

// PossibleShareAccessTierValues returns the possible values for the ShareAccessTier const type.
func PossibleShareAccessTierValues() []ShareAccessTier {
	return []ShareAccessTier{
		ShareAccessTierCool,
		ShareAccessTierHot,
		ShareAccessTierTransactionOptimized,
	}
}

// ShareErrorCode - Error codes returned by the service
type ShareErrorCode string

const (
	ShareErrorCodeAccountAlreadyExists                 ShareErrorCode = "AccountAlreadyExists"
	ShareErrorCodeAccountBeingCreated                  ShareErrorCode = "AccountBeingCreated"
	ShareErrorCodeAccountIsDisabled                    ShareErrorCode = "AccountIsDisabled"
	ShareErrorCodeAuthenticationFailed                 ShareErrorCode = "AuthenticationFailed"
	ShareErrorCodeAuthorizationFailure                 ShareErrorCode = "AuthorizationFailure"
	ShareErrorCodeAuthorizationPermissionMismatch      ShareErrorCode = "AuthorizationPermissionMismatch"
	ShareErrorCodeAuthorizationProtocolMismatch        ShareErrorCode = "AuthorizationProtocolMismatch"
	ShareErrorCodeAuthorizationResourceTypeMismatch    ShareErrorCode = "AuthorizationResourceTypeMismatch"
	ShareErrorCodeAuthorizationServiceMismatch         ShareErrorCode = "AuthorizationServiceMismatch"
	ShareErrorCodeAuthorizationSourceIPMismatch        ShareErrorCode = "AuthorizationSourceIPMismatch"
	ShareErrorCodeCannotDeleteFileOrDirectory          ShareErrorCode = "CannotDeleteFileOrDirectory"
	ShareErrorCodeClientCacheFlushDelay                ShareErrorCode = "ClientCacheFlushDelay"
	ShareErrorCodeConditionHeadersNotSupported         ShareErrorCode = "ConditionHeadersNotSupported"
	ShareErrorCodeConditionNotMet                      ShareErrorCode = "ConditionNotMet"
	ShareErrorCodeContainerQuotaDowngradeNotAllowed    ShareErrorCode = "ContainerQuotaDowngradeNotAllowed"
	ShareErrorCodeDeletePending                        ShareErrorCode = "DeletePending"
	ShareErrorCodeDirectoryNotEmpty                    ShareErrorCode = "DirectoryNotEmpty"
	ShareErrorCodeEmptyMetadataKey                     ShareErrorCode = "EmptyMetadataKey"
	ShareErrorCodeFeatureVersionMismatch               ShareErrorCode = "FeatureVersionMismatch"
	ShareErrorCodeFileLockConflict                     ShareErrorCode = "FileLockConflict"
	ShareErrorCodeInsufficientAccountPermissions       ShareErrorCode = "InsufficientAccountPermissions"
	ShareErrorCodeInternalError                        ShareErrorCode = "InternalError"
	ShareErrorCodeInvalidAuthenticationInfo            ShareErrorCode = "InvalidAuthenticationInfo"
	ShareErrorCodeInvalidFileOrDirectoryPathName       ShareErrorCode = "InvalidFileOrDirectoryPathName"
	ShareErrorCodeInvalidHTTPVerb                      ShareErrorCode = "InvalidHttpVerb"
	ShareErrorCodeInvalidHeaderValue                   ShareErrorCode = "InvalidHeaderValue"
	ShareErrorCodeInvalidInput                         ShareErrorCode = "InvalidInput"
	ShareErrorCodeInvalidMD5                           ShareErrorCode = "InvalidMd5"
	ShareErrorCodeInvalidMetadata                      ShareErrorCode = "InvalidMetadata"
	ShareErrorCodeInvalidQueryParameterValue           ShareErrorCode = "InvalidQueryParameterValue"
	ShareErrorCodeInvalidRange                         ShareErrorCode = "InvalidRange"
	ShareErrorCodeInvalidResourceName                  ShareErrorCode = "InvalidResourceName"
	ShareErrorCodeInvalidURI                           ShareErrorCode = "InvalidUri"
	ShareErrorCodeInvalidXMLDocument                   ShareErrorCode = "InvalidXmlDocument"
	ShareErrorCodeInvalidXMLNodeValue                  ShareErrorCode = "InvalidXmlNodeValue"
	ShareErrorCodeMD5Mismatch                          ShareErrorCode = "Md5Mismatch"
	ShareErrorCodeMetadataTooLarge                     ShareErrorCode = "MetadataTooLarge"
	ShareErrorCodeMissingContentLengthHeader           ShareErrorCode = "MissingContentLengthHeader"
	ShareErrorCodeMissingRequiredHeader                ShareErrorCode = "MissingRequiredHeader"
	ShareErrorCodeMissingRequiredQueryParameter        ShareErrorCode = "MissingRequiredQueryParameter"
	ShareErrorCodeMissingRequiredXMLNode               ShareErrorCode = "MissingRequiredXmlNode"
	ShareErrorCodeMultipleConditionHeadersNotSupported ShareErrorCode = "MultipleConditionHeadersNotSupported"
	ShareErrorCodeOperationTimedOut                    ShareErrorCode = "OperationTimedOut"
	ShareErrorCodeOutOfRangeInput                      ShareErrorCode = "OutOfRangeInput"
	ShareErrorCodeOutOfRangeQueryParameterValue        ShareErrorCode = "OutOfRangeQueryParameterValue"
	ShareErrorCodeParentNotFound                       ShareErrorCode = "ParentNotFound"
	ShareErrorCodeReadOnlyAttribute                    ShareErrorCode = "ReadOnlyAttribute"
	ShareErrorCodeRequestBodyTooLarge                  ShareErrorCode = "RequestBodyTooLarge"
	ShareErrorCodeRequestURLFailedToParse              ShareErrorCode = "RequestUrlFailedToParse"
	ShareErrorCodeResourceAlreadyExists                ShareErrorCode = "ResourceAlreadyExists"
	ShareErrorCodeResourceNotFound                     ShareErrorCode = "ResourceNotFound"
	ShareErrorCodeResourceTypeMismatch                 ShareErrorCode = "ResourceTypeMismatch"
	ShareErrorCodeServerBusy                           ShareErrorCode = "ServerBusy"
	ShareErrorCodeShareAlreadyExists                   ShareErrorCode = "ShareAlreadyExists"
	ShareErrorCodeShareBeingDeleted                    ShareErrorCode = "ShareBeingDeleted"
	ShareErrorCodeShareDisabled                        ShareErrorCode = "ShareDisabled"
	ShareErrorCodeShareHasSnapshots                    ShareErrorCode = "ShareHasSnapshots"
	ShareErrorCodeShareNotFound                        ShareErrorCode = "ShareNotFound"
	ShareErrorCodeShareSnapshotCountExceeded           ShareErrorCode = "ShareSnapshotCountExceeded"
	ShareErrorCodeShareSnapshotInProgress              ShareErrorCode = "ShareSnapshotInProgress"
	ShareErrorCodeShareSnapshotOperationNotSupported   ShareErrorCode = "ShareSnapshotOperationNotSupported"
	ShareErrorCodeSharingViolation                     ShareErrorCode = "SharingViolation"
	ShareErrorCodeUnsupportedHTTPVerb                  ShareErrorCode = "UnsupportedHttpVerb"
	ShareErrorCodeUnsupportedHeader                    ShareErrorCode = "UnsupportedHeader"
	ShareErrorCodeUnsupportedQueryParameter            ShareErrorCode = "UnsupportedQueryParameter"
	ShareErrorCodeUnsupportedXMLNode                   ShareErrorCode = "UnsupportedXmlNode"
)

// PossibleShareErrorCodeValues returns the possible values for the ShareErrorCode const type.
func PossibleShareErrorCodeValues() []ShareErrorCode {
	return []ShareErrorCode{
		ShareErrorCodeAccountAlreadyExists,
		ShareErrorCodeAccountBeingCreated,
		ShareErrorCodeAccountIsDisabled,
		ShareErrorCodeAuthenticationFailed,
		ShareErrorCodeAuthorizationFailure,
		ShareErrorCodeAuthorizationPermissionMismatch,
		ShareErrorCodeAuthorizationProtocolMismatch,
		ShareErrorCodeAuthorizationResourceTypeMismatch,
		ShareErrorCodeAuthorizationServiceMismatch,
		ShareErrorCodeAuthorizationSourceIPMismatch,
		ShareErrorCodeCannotDeleteFileOrDirectory,
		ShareErrorCodeClientCacheFlushDelay,
		ShareErrorCodeConditionHeadersNotSupported,
		ShareErrorCodeConditionNotMet,
		ShareErrorCodeContainerQuotaDowngradeNotAllowed,
		ShareErrorCodeDeletePending,
		ShareErrorCodeDirectoryNotEmpty,
		ShareErrorCodeEmptyMetadataKey,
		ShareErrorCodeFeatureVersionMismatch,
		ShareErrorCodeFileLockConflict,
		ShareErrorCodeInsufficientAccountPermissions,
		ShareErrorCodeInternalError,
		ShareErrorCodeInvalidAuthenticationInfo,
		ShareErrorCodeInvalidFileOrDirectoryPathName,
		ShareErrorCodeInvalidHTTPVerb,
		ShareErrorCodeInvalidHeaderValue,
		ShareErrorCodeInvalidInput,
		ShareErrorCodeInvalidMD5,
		ShareErrorCodeInvalidMetadata,
		ShareErrorCodeInvalidQueryParameterValue,
		ShareErrorCodeInvalidRange,
		ShareErrorCodeInvalidResourceName,
		ShareErrorCodeInvalidURI,
		ShareErrorCodeInvalidXMLDocument,
		ShareErrorCodeInvalidXMLNodeValue,
		ShareErrorCodeMD5Mismatch,
		ShareErrorCodeMetadataTooLarge,
		ShareErrorCodeMissingContentLengthHeader,
		ShareErrorCodeMissingRequiredHeader,
		ShareErrorCodeMissingRequiredQueryParameter,
		ShareErrorCodeMissingRequiredXMLNode,
		ShareErrorCodeMultipleConditionHeadersNotSupported,
		ShareErrorCodeOperationTimedOut,
		ShareErrorCodeOutOfRangeInput,
		ShareErrorCodeOutOfRangeQueryParameterValue,
		ShareErrorCodeParentNotFound,
		ShareErrorCodeReadOnlyAttribute,
		ShareErrorCodeRequestBodyTooLarge,
		ShareErrorCodeRequestURLFailedToParse,
		ShareErrorCodeResourceAlreadyExists,
		ShareErrorCodeResourceNotFound,
		ShareErrorCodeResourceTypeMismatch,
		ShareErrorCodeServerBusy,
		ShareErrorCodeShareAlreadyExists,
		ShareErrorCodeShareBeingDeleted,
		ShareErrorCodeShareDisabled,
		ShareErrorCodeShareHasSnapshots,
		ShareErrorCodeShareNotFound,
		ShareErrorCodeShareSnapshotCountExceeded,
		ShareErrorCodeShareSnapshotInProgress,
		ShareErrorCodeShareSnapshotOperationNotSupported,
		ShareErrorCodeSharingViolation,
		ShareErrorCodeUnsupportedHTTPVerb,
		ShareErrorCodeUnsupportedHeader,
		ShareErrorCodeUnsupportedQueryParameter,
		ShareErrorCodeUnsupportedXMLNode,
	}
}

type ShareRootSquash string

const (
	ShareRootSquashNoRootSquash ShareRootSquash = "NoRootSquash"
	ShareRootSquashRootSquash   ShareRootSquash = "RootSquash"
	ShareRootSquashAllSquash    ShareRootSquash = "AllSquash"
)

// PossibleShareRootSquashValues returns the possible values for the ShareRootSquash const type.
func PossibleShareRootSquashValues() []ShareRootSquash {
	return []ShareRootSquash{
		ShareRootSquashNoRootSquash,
		ShareRootSquashRootSquash,
		ShareRootSquashAllSquash,
	}
}
