//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package azfile

import (
	"encoding/xml"
	"time"
)

// MarshalXML implements the xml.Marshaller interface for type AccessPolicy.
func (a AccessPolicy) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type alias AccessPolicy
	aux := &struct {
		*alias
		Expiry *timeRFC3339 `xml:"Expiry"`
		Start  *timeRFC3339 `xml:"Start"`
	}{
		alias:  (*alias)(&a),
		Expiry: (*timeRFC3339)(a.Expiry),
		Start:  (*timeRFC3339)(a.Start),
	}
	return e.EncodeElement(aux, start)
}

// UnmarshalXML implements the xml.Unmarshaller interface for type AccessPolicy.
func (a *AccessPolicy) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type alias AccessPolicy
	aux := &struct {
		*alias
		Expiry *timeRFC3339 `xml:"Expiry"`
		Start  *timeRFC3339 `xml:"Start"`
	}{
		alias: (*alias)(a),
	}
	if err := d.DecodeElement(aux, &start); err != nil {
		return err
	}
	a.Expiry = (*time.Time)(aux.Expiry)
	a.Start = (*time.Time)(aux.Start)
	return nil
}

// MarshalXML implements the xml.Marshaller interface for type FileProperty.
func (f FileProperty) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type alias FileProperty
	aux := &struct {
		*alias
		ChangeTime     *timeRFC3339 `xml:"ChangeTime"`
		CreationTime   *timeRFC3339 `xml:"CreationTime"`
		LastAccessTime *timeRFC3339 `xml:"LastAccessTime"`
		LastModified   *timeRFC1123 `xml:"Last-Modified"`
		LastWriteTime  *timeRFC3339 `xml:"LastWriteTime"`
	}{
		alias:          (*alias)(&f),
		ChangeTime:     (*timeRFC3339)(f.ChangeTime),
		CreationTime:   (*timeRFC3339)(f.CreationTime),
		LastAccessTime: (*timeRFC3339)(f.LastAccessTime),
		LastModified:   (*timeRFC1123)(f.LastModified),
		LastWriteTime:  (*timeRFC3339)(f.LastWriteTime),
	}
	return e.EncodeElement(aux, start)
}

// UnmarshalXML implements the xml.Unmarshaller interface for type FileProperty.
func (f *FileProperty) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type alias FileProperty
	aux := &struct {
		*alias
		ChangeTime     *timeRFC3339 `xml:"ChangeTime"`
		CreationTime   *timeRFC3339 `xml:"CreationTime"`
		LastAccessTime *timeRFC3339 `xml:"LastAccessTime"`
		LastModified   *timeRFC1123 `xml:"Last-Modified"`
		LastWriteTime  *timeRFC3339 `xml:"LastWriteTime"`
	}{
		alias: (*alias)(f),
	}
	if err := d.DecodeElement(aux, &start); err != nil {
		return err
	}
	f.ChangeTime = (*time.Time)(aux.ChangeTime)
	f.CreationTime = (*time.Time)(aux.CreationTime)
	f.LastAccessTime = (*time.Time)(aux.LastAccessTime)
	f.LastModified = (*time.Time)(aux.LastModified)
	f.LastWriteTime = (*time.Time)(aux.LastWriteTime)
	return nil
}

// MarshalXML implements the xml.Marshaller interface for type FilesAndDirectoriesListSegment.
func (f FilesAndDirectoriesListSegment) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type alias FilesAndDirectoriesListSegment
	aux := &struct {
		*alias
		DirectoryItems *[]*DirectoryItem `xml:"Directory"`
		FileItems      *[]*FileItem      `xml:"File"`
	}{
		alias: (*alias)(&f),
	}
	if f.DirectoryItems != nil {
		aux.DirectoryItems = &f.DirectoryItems
	}
	if f.FileItems != nil {
		aux.FileItems = &f.FileItems
	}
	return e.EncodeElement(aux, start)
}

// MarshalXML implements the xml.Marshaller interface for type HandleItem.
func (h HandleItem) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type alias HandleItem
	aux := &struct {
		*alias
		LastReconnectTime *timeRFC1123 `xml:"LastReconnectTime"`
		OpenTime          *timeRFC1123 `xml:"OpenTime"`
	}{
		alias:             (*alias)(&h),
		LastReconnectTime: (*timeRFC1123)(h.LastReconnectTime),
		OpenTime:          (*timeRFC1123)(h.OpenTime),
	}
	return e.EncodeElement(aux, start)
}

// UnmarshalXML implements the xml.Unmarshaller interface for type HandleItem.
func (h *HandleItem) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type alias HandleItem
	aux := &struct {
		*alias
		LastReconnectTime *timeRFC1123 `xml:"LastReconnectTime"`
		OpenTime          *timeRFC1123 `xml:"OpenTime"`
	}{
		alias: (*alias)(h),
	}
	if err := d.DecodeElement(aux, &start); err != nil {
		return err
	}
	h.LastReconnectTime = (*time.Time)(aux.LastReconnectTime)
	h.OpenTime = (*time.Time)(aux.OpenTime)
	return nil
}

// MarshalXML implements the xml.Marshaller interface for type ListHandlesResponse.
func (l ListHandlesResponse) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type alias ListHandlesResponse
	aux := &struct {
		*alias
		HandleList *[]*HandleItem `xml:"Entries>Handle"`
	}{
		alias: (*alias)(&l),
	}
	if l.HandleList != nil {
		aux.HandleList = &l.HandleList
	}
	return e.EncodeElement(aux, start)
}

// MarshalXML implements the xml.Marshaller interface for type ListSharesResponse.
func (l ListSharesResponse) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type alias ListSharesResponse
	aux := &struct {
		*alias
		ShareItems *[]*ShareItemInternal `xml:"Shares>Share"`
	}{
		alias: (*alias)(&l),
	}
	if l.ShareItems != nil {
		aux.ShareItems = &l.ShareItems
	}
	return e.EncodeElement(aux, start)
}

// MarshalXML implements the xml.Marshaller interface for type ShareFileRangeList.
func (s ShareFileRangeList) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type alias ShareFileRangeList
	aux := &struct {
		*alias
		ClearRanges *[]*ClearRange `xml:"ClearRange"`
		Ranges      *[]*FileRange  `xml:"Range"`
	}{
		alias: (*alias)(&s),
	}
	if s.ClearRanges != nil {
		aux.ClearRanges = &s.ClearRanges
	}
	if s.Ranges != nil {
		aux.Ranges = &s.Ranges
	}
	return e.EncodeElement(aux, start)
}

// UnmarshalXML implements the xml.Unmarshaller interface for type ShareItemInternal.
func (s *ShareItemInternal) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type alias ShareItemInternal
	aux := &struct {
		*alias
		Metadata additionalProperties `xml:"Metadata"`
	}{
		alias: (*alias)(s),
	}
	if err := d.DecodeElement(aux, &start); err != nil {
		return err
	}
	s.Metadata = (map[string]*string)(aux.Metadata)
	return nil
}

// MarshalXML implements the xml.Marshaller interface for type SharePropertiesInternal.
func (s SharePropertiesInternal) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	type alias SharePropertiesInternal
	aux := &struct {
		*alias
		AccessTierChangeTime          *timeRFC1123 `xml:"AccessTierChangeTime"`
		DeletedTime                   *timeRFC1123 `xml:"DeletedTime"`
		LastModified                  *timeRFC1123 `xml:"Last-Modified"`
		NextAllowedQuotaDowngradeTime *timeRFC1123 `xml:"NextAllowedQuotaDowngradeTime"`
	}{
		alias:                         (*alias)(&s),
		AccessTierChangeTime:          (*timeRFC1123)(s.AccessTierChangeTime),
		DeletedTime:                   (*timeRFC1123)(s.DeletedTime),
		LastModified:                  (*timeRFC1123)(s.LastModified),
		NextAllowedQuotaDowngradeTime: (*timeRFC1123)(s.NextAllowedQuotaDowngradeTime),
	}
	return e.EncodeElement(aux, start)
}

// UnmarshalXML implements the xml.Unmarshaller interface for type SharePropertiesInternal.
func (s *SharePropertiesInternal) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	type alias SharePropertiesInternal
	aux := &struct {
		*alias
		AccessTierChangeTime          *timeRFC1123 `xml:"AccessTierChangeTime"`
		DeletedTime                   *timeRFC1123 `xml:"DeletedTime"`
		LastModified                  *timeRFC1123 `xml:"Last-Modified"`
		NextAllowedQuotaDowngradeTime *timeRFC1123 `xml:"NextAllowedQuotaDowngradeTime"`
	}{
		alias: (*alias)(s),
	}
	if err := d.DecodeElement(aux, &start); err != nil {
		return err
	}
	s.AccessTierChangeTime = (*time.Time)(aux.AccessTierChangeTime)
	s.DeletedTime = (*time.Time)(aux.DeletedTime)
	s.LastModified = (*time.Time)(aux.LastModified)
	s.NextAllowedQuotaDowngradeTime = (*time.Time)(aux.NextAllowedQuotaDowngradeTime)
	return nil
}

// MarshalXML implements the xml.Marshaller interface for type ShareServiceProperties.
func (s ShareServiceProperties) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	start.Name.Local = "StorageServiceProperties"
	type alias ShareServiceProperties
	aux := &struct {
		*alias
		Cors *[]*ShareCorsRule `xml:"Cors>CorsRule"`
	}{
		alias: (*alias)(&s),
	}
	if s.Cors != nil {
		aux.Cors = &s.Cors
	}
	return e.EncodeElement(aux, start)
}
