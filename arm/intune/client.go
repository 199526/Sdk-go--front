package intune

// Copyright (c) Microsoft and contributors.  All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by Microsoft (R) AutoRest Code Generator 0.12.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

import (
	"github.com/Azure/azure-sdk-for-go/Godeps/_workspace/src/github.com/Azure/go-autorest/autorest"
	"net/http"
	"net/url"
)

const (
	// APIVersion is the version of the Intune
	APIVersion = "2015-01-11-alpha"

	// DefaultBaseURI is the default URI used for the service Intune
	DefaultBaseURI = "https://management.azure.com"
)

// ManagementClient is the microsoft.Intune Resource provider Api features in
// the swagger-2.0 specification
type ManagementClient struct {
	autorest.Client
	BaseURI        string
	SubscriptionID string
}

// New creates an instance of the ManagementClient client.
func New(subscriptionID string) ManagementClient {
	return NewWithBaseURI(DefaultBaseURI, subscriptionID)
}

// NewWithBaseURI creates an instance of the ManagementClient client.
func NewWithBaseURI(baseURI string, subscriptionID string) ManagementClient {
	return ManagementClient{
		Client:         autorest.NewClientWithUserAgent(UserAgent()),
		BaseURI:        baseURI,
		SubscriptionID: subscriptionID,
	}
}

// GetApps returns Intune Manageable apps.
//
// hostName is location hostName for the tenant filter is the filter to apply
// on the operation. selectParameter is select specific fields in entity.
func (client ManagementClient) GetApps(hostName string, filter string, top *int, selectParameter string) (result ApplicationCollection, ae error) {
	req, err := client.GetAppsPreparer(hostName, filter, top, selectParameter)
	if err != nil {
		return result, autorest.NewErrorWithError(err, "intune/ManagementClient", "GetApps", "Failure preparing request")
	}

	resp, err := client.GetAppsSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		return result, autorest.NewErrorWithError(err, "intune/ManagementClient", "GetApps", "Failure sending request")
	}

	result, err = client.GetAppsResponder(resp)
	if err != nil {
		ae = autorest.NewErrorWithError(err, "intune/ManagementClient", "GetApps", "Failure responding to request")
	}

	return
}

// GetAppsPreparer prepares the GetApps request.
func (client ManagementClient) GetAppsPreparer(hostName string, filter string, top *int, selectParameter string) (*http.Request, error) {
	pathParameters := map[string]interface{}{
		"hostName": url.QueryEscape(hostName),
	}

	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}
	if len(filter) > 0 {
		queryParameters["$filter"] = filter
	}
	if top != nil {
		queryParameters["$top"] = top
	}
	if len(selectParameter) > 0 {
		queryParameters["$select"] = selectParameter
	}

	return autorest.Prepare(&http.Request{},
		autorest.AsJSON(),
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPath("/providers/Microsoft.Intune/locations/{hostName}/apps"),
		autorest.WithPathParameters(pathParameters),
		autorest.WithQueryParameters(queryParameters))
}

// GetAppsSender sends the GetApps request. The method will close the
// http.Response Body if it receives an error.
func (client ManagementClient) GetAppsSender(req *http.Request) (*http.Response, error) {
	return client.Send(req, http.StatusOK)
}

// GetAppsResponder handles the response to the GetApps request. The method always
// closes the http.Response Body.
func (client ManagementClient) GetAppsResponder(resp *http.Response) (result ApplicationCollection, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		autorest.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// GetLocationByHostName returns location for given tenant.
func (client ManagementClient) GetLocationByHostName() (result Location, ae error) {
	req, err := client.GetLocationByHostNamePreparer()
	if err != nil {
		return result, autorest.NewErrorWithError(err, "intune/ManagementClient", "GetLocationByHostName", "Failure preparing request")
	}

	resp, err := client.GetLocationByHostNameSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		return result, autorest.NewErrorWithError(err, "intune/ManagementClient", "GetLocationByHostName", "Failure sending request")
	}

	result, err = client.GetLocationByHostNameResponder(resp)
	if err != nil {
		ae = autorest.NewErrorWithError(err, "intune/ManagementClient", "GetLocationByHostName", "Failure responding to request")
	}

	return
}

// GetLocationByHostNamePreparer prepares the GetLocationByHostName request.
func (client ManagementClient) GetLocationByHostNamePreparer() (*http.Request, error) {
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}

	return autorest.Prepare(&http.Request{},
		autorest.AsJSON(),
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPath("/providers/Microsoft.Intune/locations/hostName"),
		autorest.WithQueryParameters(queryParameters))
}

// GetLocationByHostNameSender sends the GetLocationByHostName request. The method will close the
// http.Response Body if it receives an error.
func (client ManagementClient) GetLocationByHostNameSender(req *http.Request) (*http.Response, error) {
	return client.Send(req, http.StatusOK)
}

// GetLocationByHostNameResponder handles the response to the GetLocationByHostName request. The method always
// closes the http.Response Body.
func (client ManagementClient) GetLocationByHostNameResponder(resp *http.Response) (result Location, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		autorest.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}

// GetLocations returns location for user tenant.
func (client ManagementClient) GetLocations() (result LocationCollection, ae error) {
	req, err := client.GetLocationsPreparer()
	if err != nil {
		return result, autorest.NewErrorWithError(err, "intune/ManagementClient", "GetLocations", "Failure preparing request")
	}

	resp, err := client.GetLocationsSender(req)
	if err != nil {
		result.Response = autorest.Response{Response: resp}
		return result, autorest.NewErrorWithError(err, "intune/ManagementClient", "GetLocations", "Failure sending request")
	}

	result, err = client.GetLocationsResponder(resp)
	if err != nil {
		ae = autorest.NewErrorWithError(err, "intune/ManagementClient", "GetLocations", "Failure responding to request")
	}

	return
}

// GetLocationsPreparer prepares the GetLocations request.
func (client ManagementClient) GetLocationsPreparer() (*http.Request, error) {
	queryParameters := map[string]interface{}{
		"api-version": APIVersion,
	}

	return autorest.Prepare(&http.Request{},
		autorest.AsJSON(),
		autorest.AsGet(),
		autorest.WithBaseURL(client.BaseURI),
		autorest.WithPath("/providers/Microsoft.Intune/locations"),
		autorest.WithQueryParameters(queryParameters))
}

// GetLocationsSender sends the GetLocations request. The method will close the
// http.Response Body if it receives an error.
func (client ManagementClient) GetLocationsSender(req *http.Request) (*http.Response, error) {
	return client.Send(req, http.StatusOK)
}

// GetLocationsResponder handles the response to the GetLocations request. The method always
// closes the http.Response Body.
func (client ManagementClient) GetLocationsResponder(resp *http.Response) (result LocationCollection, err error) {
	err = autorest.Respond(
		resp,
		client.ByInspecting(),
		autorest.WithErrorUnlessStatusCode(http.StatusOK),
		autorest.ByUnmarshallingJSON(&result),
		autorest.ByClosing())
	result.Response = autorest.Response{Response: resp}
	return
}
